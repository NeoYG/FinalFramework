//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FirClient_Manager_NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FirClient.Manager.NetworkManager), typeof(FirClient.Manager.BaseManager));
		L.RegFunction("SendData", new LuaCSFunction(SendData));
		L.RegFunction("New", new LuaCSFunction(_CreateFirClient_Manager_NetworkManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("mClient", new LuaCSFunction(get_mClient), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFirClient_Manager_NetworkManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FirClient.Manager.NetworkManager obj = new FirClient.Manager.NetworkManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FirClient.Manager.NetworkManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FirClient.Manager.NetworkManager obj = (FirClient.Manager.NetworkManager)ToLua.CheckObject<FirClient.Manager.NetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaByteBuffer arg1 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 3));
			obj.SendData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mClient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FirClient.Manager.NetworkManager obj = (FirClient.Manager.NetworkManager)o;
			LiteNetLib.NetManager ret = obj.mClient;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mClient on a nil value");
		}
	}
}

